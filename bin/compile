#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output

# Enable extended globbing
shopt -s extglob

# Debug
# set -x

# Clean up leaking environment
unset GIT_DIR

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`

WORKING_DIR=$BUILDPACK_DIR/tmp/

GEOS_VERSION=3.6.1
GEOS_TARBALL="geos-${GEOS_VERSION}.tar.bz2"
GEOS_SRC="http://download.osgeo.org/geos/${GEOS_TARBALL}"
GEOS_TARGET_DIR=$BUILD_DIR/vendor/geos/
GEOS_PRECOMPILED_PACKAGE_FILENAME="geos-${GEOS_VERSION}-compiled-correct.tar.gz"
GEOS_CACHED_PRECOMPILED_PACKAGE_DIR=$CACHE_DIR/vendor/geos
GEOS_CACHED_PRECOMPILED_PACKAGE_PATH=$GEOS_CACHED_PRECOMPILED_PACKAGE_DIR/$GEOS_PRECOMPILED_PACKAGE_FILENAME

PROJ_VERSION=4.9.3
PROJ_TARBALL="proj-${PROJ_VERSION}.tar.gz"
PROJ_SRC="http://download.osgeo.org/proj/${PROJ_TARBALL}"
PROJ_TARGET_DIR=$BUILD_DIR/vendor/proj/
PROJ_PRECOMPILED_PACKAGE_FILENAME="proj-${PROJ_VERSION}-compiled-correct.tar.gz"
PROJ_CACHED_PRECOMPILED_PACKAGE_DIR=$CACHE_DIR/vendor/proj
PROJ_CACHED_PRECOMPILED_PACKAGE_PATH=$PROJ_CACHED_PRECOMPILED_PACKAGE_DIR/$PROJ_PRECOMPILED_PACKAGE_FILENAME

function indent() {
  sed -u 's/^/       /'
}

function topic() {
  echo "-----> $*"
}

function exports() {
  local prefix_dir=$1

  cat <<SHELL
  export PKG_CONFIG_PATH="$prefix_dir/lib/pkgconfig:\$PKG_CONFIG_PATH"
  export LD_LIBRARY_PATH="$prefix_dir/lib:\$LD_LIBRARY_PATH"
SHELL
}

mkdir -p $WORKING_DIR | indent

mkdir -p $GEOS_TARGET_DIR | indent
mkdir -p $GEOS_CACHED_PRECOMPILED_PACKAGE_DIR | indent

mkdir -p $PROJ_TARGET_DIR | indent
mkdir -p $PROJ_CACHED_PRECOMPILED_PACKAGE_DIR | indent

cd $WORKING_DIR
topic "compiling geos"

if [ -f $GEOS_CACHED_PRECOMPILED_PACKAGE_PATH ]; then
  topic "Using geos-${GEOS_VERSION}"
  tar -xf "$GEOS_CACHED_PRECOMPILED_PACKAGE_PATH" --skip-old-files -C $GEOS_TARGET_DIR | indent
  strip $GEOS_TARGET_DIR/*/** 2> /dev/null | indent || echo ""
else
  topic "Downloading geos-${GEOS_VERSION} source"
  wget --no-verbose --no-clobber $GEOS_SRC | indent
  tar -xf $GEOS_TARBALL --skip-old-files | indent

  topic "Building geos-${GEOS_VERSION}"
  cd geos-${GEOS_VERSION}
  ./configure --prefix="$GEOS_TARGET_DIR" | indent
  make | indent
  make install | indent
  make clean | indent
  make distclean | indent

  topic "Caching precompiled package into $GEOS_CACHED_PRECOMPILED_PACKAGE_DIR"
  cd $GEOS_CACHED_PRECOMPILED_PACKAGE_DIR
  # Remove old cached precompiled packages
  rm -f *.* | indent
  # don't need the debugging symbols
  strip $GEOS_TARGET_DIR/*/** 2> /dev/null | indent || echo ""
  # Package the compiled binaries
  tar -zcvf "$GEOS_PRECOMPILED_PACKAGE_FILENAME" -C $GEOS_TARGET_DIR . | indent
fi

# Subsequent buildpacks need to know where the libraries are, based on the
# $BUILDPATH, which is random, e.g. /tmp/build_1b673f33c9b7c4b2f548536d3b9d7e8e
topic "Configuring environment for subsequent buildpacks"
# Use echo to expand the variables that are escaped in the exports function.
echo "$(exports "$GEOS_TARGET_DIR")" > $BUILDPACK_DIR/export

# By the time the app is running, all the buildpacks output has been combined
# into the $HOME folder.
topic "Configure application environment"
mkdir -p $BUILD_DIR/.profile.d
exports "\$HOME/vendor/geos" > $BUILD_DIR/.profile.d/000_geos.sh

echo "GEOS complete"


cd $WORKING_DIR
topic "compiling proj"

if [ -f $PROJ_CACHED_PRECOMPILED_PACKAGE_PATH ]; then
  topic "Using proj-${PROJ_VERSION}"
  tar -xf "$PROJ_CACHED_PRECOMPILED_PACKAGE_PATH" --skip-old-files -C $PROJ_TARGET_DIR | indent
  strip $PROJ_TARGET_DIR/*/** 2> /dev/null | indent || echo ""
else
  topic "Downloading proj-${PROJ_VERSION} source"
  wget --no-verbose --no-clobber $PROJ_SRC | indent
  tar -xf $PROJ_TARBALL --skip-old-files | indent

  topic "Building proj-${PROJ_VERSION}"
  cd proj-${PROJ_VERSION}
  ./configure --prefix="$PROJ_TARGET_DIR" | indent
  make | indent
  make install | indent
  make clean | indent
  make distclean | indent

  topic "Caching precompiled package"
  cd $PROJ_CACHED_PRECOMPILED_PACKAGE_DIR
  # Remove old cached precompiled packages
  rm -f *.* | indent
  # Package the compiled binaries
  strip $PROJ_TARGET_DIR/*/** 2> /dev/null | indent || echo ""
  tar -zcvf "$PROJ_PRECOMPILED_PACKAGE_FILENAME" -C $PROJ_TARGET_DIR . | indent
fi

# Subsequent buildpacks need to know where the libraries are, based on the
# $BUILDPATH, which is random, e.g. /tmp/build_1b673f33c9b7c4b2f548536d3b9d7e8e
topic "Configuring environment for subsequent buildpacks"
# Use echo to expand the variables that are escaped in the exports function.
echo "$(exports "$PROJ_TARGET_DIR")" >> $BUILDPACK_DIR/export

# By the time the app is running, all the buildpacks output has been combined
# into the $HOME folder.
topic "Configure application environment"
mkdir -p $BUILD_DIR/.profile.d
exports "\$HOME/vendor/proj" > $BUILD_DIR/.profile.d/000_proj.sh

echo "PROJ complete"
